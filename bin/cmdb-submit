#!/usr/bin/perl

##############################################################################
### Configuration ############################################################
##############################################################################

use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/Stanford-Remedy/lib";
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-perl/lib";
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-cmdb-perl/lib";

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 2;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
# use warnings;

use Getopt::Long;
use Lingua::EN::Inflect qw/inflect/;
use Pod::Usage;
use Remedy::CMDB::Global;
use Remedy::CMDB::Register;
use Remedy::CMDB::Register::Response;
use Remedy::CMDB;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

##############################################################################
### main () ##################################################################
##############################################################################

our $LOGGER   = Remedy::CMDB::Log->get_logger;

## we create the config item first so we can do logging and such
my $config = eval { Remedy::CMDB::Config->load () };
exit_error ("could not load CMDB configuration: $@") unless $config;

## this is the only place we're going to use non-XML exit error strings
my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) }) || error_usage ();

$config->log->more_logging ($DEBUG) if $DEBUG;
# $LOGGER = $config->log->logger;

## read the XML from STDIN
my $register = eval { Remedy::CMDB::Register->read ('xml', 'type' => 'stream', 
    'source' => \*STDIN) };
exit_error ("could not read registration source: $@") unless $register;

$LOGGER->debug (sprintf ("parsed registration XML: %d items, %d relationships",
    scalar $register->items, scalar $register->relationships));

## Make sure the mdrId is set; we'll match it in a second
my $mdr_parent = $register->mdrId || exit_error ("no mdrId in source XML");
$LOGGER->debug ("mdr_parent is $mdr_parent");

## Now make sure the mdrId matches a valid dataset
my $dataset = $config->mdr_to_dataset ($mdr_parent) 
    || exit_error ("no dataset mapping for $mdr_parent");
$LOGGER->debug ("associated dataset is $dataset");

## TODO: look at the kerberos principal, ye mighty, and despair
$LOGGER->debug ("skipping kerberos principal check for now");

## Finally, we can create our Remedy connection
$LOGGER->debug ("connecting to CMDB");
my $cmdb = eval { Remedy::CMDB->connect ('config' => $config) }
    || exit_error ("couldn't create CMDB object: $@");
exit_error ($@) if $@;

## Start creating the response now
our $RESPONSE = Remedy::CMDB::Register::Response->new ();

## Register all items
$LOGGER->debug ('registering items');
register ($cmdb, [$register->items], 'type' => 'item', 
    'response' => $RESPONSE, 'dataset' => $dataset, 'mdr' => $mdr_parent);

$LOGGER->debug ('registering relationships');
register ($cmdb, [$register->relationships], 'type' => 'relationship',
    'response' => $RESPONSE, 'dataset' => $dataset, 'mdr' => $mdr_parent);

## TODO: ...and then, deregistration.
$LOGGER->debug ('registering deregistrations');

#my ($item_count, $item_error) = (0, 0);
#foreach my $item ($register->items) { 
#}
#
## then relationships w/register_relationship
#my ($relate_count, $relate_error) = (0, 0);
#foreach my $relate ($register->relationships) {
    #$relate_count++;
    #if ($error) {
        #$RESPONSE->add_declined ($relate, $error) if $error;
        #$relate_error++;
    #}
#}

exit_response ();

##############################################################################
### Subroutines ##############################################################
##############################################################################

sub register {
    my ($cmdb, $item_aref, %args) = @_;
    my ($count, $error_count) = (0, 0);
    foreach my $item (@$item_aref) { 
        $count++;
        my $error = $item->register ($cmdb, 'response' => $args{'response'},
            'dataset' => $args{'dataset'}, 'mdr_parent' => $args{'mdr'});
        if ($error) { 
            $RESPONSE->add_declined ($item, $error) if $error;
            $error_count++;
        }
    }
    $LOGGER->info (sprintf ("%s out of %s", 
        inflect ("NUM($error_count) registration PL_N(error)"),
        inflect ("NUM($count) PL_N($args{'type'})")));
}

sub exit_error { 
    my ($error) = @_;
    $LOGGER->fatal ($error);
    Remedy::CMDB::Register::Response->exit_error ($error)
}

sub exit_response { $RESPONSE->exit_response (@_) }

sub error_usage {
    my ($error) = @_;
    $LOGGER->error ($error);
    pod2usage (-exit_status => 2, -verbose => 1);
}

##############################################################################
### Documentation ############################################################
##############################################################################
