#!/usr/bin/perl
# Copyright and license are in the documentation below.

=head1 NAME

cmdb-submit - takes XML on STDIN, and sends it to the CMDB

=head1 SYNOPSIS

B<cmdb-submit> [--debug] [--timeout I<TIME>]

=head1 DESCRIPTION

B<cmdb-register> takes an XML-formatted registration, parses the request to
confirm that the XML is valid, and passes it off to the configured CMDB.  It
does this without using a client-server model, and by default times out after
60 seconds.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

### How many seconds should we wait for a single spawned process to run?
our $ALARM = 60;

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Remedy::CMDB;
use Remedy::CMDB::Config;
use Remedy::CMDB::Client;
use Remedy::CMDB::Server::XML;
use Remedy::CMDB::Response;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

shift @ARGV if $ENV{'REMOTE_USER'};    # support for remctl use

###############################################################################
### main() ####################################################################
###############################################################################

our $LOGGER = Remedy::CMDB::Log->get_logger;

## we create the config item first so we can do logging and such
my $config = eval { Remedy::CMDB::Config->load () };
exit_error ("could not load CMDB configuration: $@") unless $config;

my $parser = Getopt::Long::Parser->new;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'timeout=s'     => \$ALARM,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) }) || error_usage ();

$config->log->more_logging ($DEBUG) if $DEBUG;

my $string = eval { Remedy::CMDB::Client->create_xml_string (\*STDIN) };
exit_error ($@) if $@;
exit_error ("no XML string") unless $string;

## don't start the alarm until after we've parsed the string
$SIG{ALRM} = sub { exit_error ("$0: timeout ($ALARM seconds)") };
alarm $ALARM;

my $register = eval { Remedy::CMDB::Server::XML->read ('xml', 
    'type' => 'stream', 'source' => $string) };
if ($@) { 
    exit_error ("invalid XML: $@");
} 
exit_error ("could not create registration object: $@") unless $register;

my $class = $register->class;
my $query = $register->query;
$LOGGER->debug ("doing a $class query on $query");

## Make sure the mdrId is set; we'll match it in a second
my $mdr_parent = $query->mdrId || exit_error ('no mdrId in source XML');
$LOGGER->debug ("mdr_parent is $mdr_parent");

## Now make sure the mdrId matches a valid dataset
my $dataset = $config->mdr_to_dataset ($mdr_parent) 
    || exit_error ("no dataset mapping for $mdr_parent");
$LOGGER->debug ("associated dataset is $dataset");

## TODO: kerberos principal check goes here.
# $config->sources->validate_principal ($mdr_parent, $register->env
#   ('KRB5CCNAME'));
$LOGGER->debug ('not yet validating kerberos principals');

## Finally, we can create our Remedy connection
$LOGGER->debug ("connecting to CMDB");
my $cmdb = eval { Remedy::CMDB->connect ('config' => $config, 
    'debug' => $DEBUG) } || exit_error ("couldn't create CMDB object: $@");
exit_error ($@) if $@;

## Actually register the query.
$LOGGER->debug ("registering the query");
my $response = $query->register_all ($cmdb, 'dataset' => $dataset, 
    'mdr' => $mdr_parent);

## Let the response print its output and exit.
$response->exit_response;

## We shouldn't have gotten here.
exit 1;

###############################################################################
### Functions #################################################################
###############################################################################

sub exit_error { Remedy::CMDB::Response->exit_error (@_) }

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Increase the debugging level of the run.  Can be added multiple times, each of
which will add significant additional debug info.

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints this manual page and exit.

=item B<--timeout> I<TIME>

Seconds to wait for the request to complete.  If set to 0, then we will have no
timeout (useful for submitting very large data sets).  Defaults to 60.

=back

=head1 TODO

Need to put the kerberos principal check in.

=head1 REQUIREMENTS

B<Remedy::CMDB>, B<Remedy::CMDB::Config>, B<Remedy::CMDB::Client>,
B<Remedy::CMDB::Response> B<Remedy::CMDB::Server::XML>,

=head1 SEE ALSO

B<Remedy::CMDB::Config>

=head1 HOMEPAGE

TBD.

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
