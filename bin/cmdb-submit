#!/usr/bin/perl
# Copyright and license are in the documentation below.

=head1 NAME

cmdb-submit - maintain an active connection to the Remedy CMDB

=head1 SYNOPSIS

B<cmdb-submit> [--debug]

B<cmdb-submit> --daemon

=head1 DESCRIPTION

cmdb-submit


(Note that this times out.  If you want to submit without timeouts, use
something else.)

cmdb-submit is a daemon that does three things: it listens for input XML on a
unix-domain socket, it maintains an ongoing connection to the Remedy CMDB into
which the data is passed, and it logs information about how this data flow is
working.  This effectively offers a static version of cmdb-submit(1).

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

### How many seconds should we wait for a single spawned process to run?
our $ALARM = 60;

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Remedy::CMDB;
use Remedy::CMDB::Config;
use Remedy::CMDB::Client;
use Remedy::CMDB::Server::XML;
use Remedy::CMDB::Response;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

shift @ARGV if $ENV{'REMOTE_USER'};    # support for remctl use

###############################################################################
### main() ####################################################################
###############################################################################

our $LOGGER = Remedy::CMDB::Log->get_logger;

## we create the config item first so we can do logging and such
my $config = eval { Remedy::CMDB::Config->load () };
exit_error ("could not load CMDB configuration: $@") unless $config;

my $parser = Getopt::Long::Parser->new;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) }) || error_usage ();

$config->log->more_logging ($DEBUG) if $DEBUG;

my $string = eval { Remedy::CMDB::Client->create_xml_string (\*STDIN) };
exit_error ($@) if $@;
exit_error ("no XML string") unless $string;

## don't start the alarm until after we've parsed the string
$SIG{ALRM} = sub { exit_error ("$0: timeout ($ALARM seconds)") };
alarm $ALARM;

my $register = eval { Remedy::CMDB::Server::XML->read ('xml', 
    'type' => 'stream', 'source' => $string) };
if ($@) { 
    exit_error ("invalid XML: $@");
} 
exit_error ("could not create registration object: $@") unless $register;

my $class = $register->class;
my $query = $register->query;
$LOGGER->debug ("doing a $class query on $query");

## Make sure the mdrId is set; we'll match it in a second
my $mdr_parent = $query->mdrId || exit_error ('no mdrId in source XML');
$LOGGER->debug ("mdr_parent is $mdr_parent");

## Now make sure the mdrId matches a valid dataset
my $dataset = $config->mdr_to_dataset ($mdr_parent) 
    || exit_error ("no dataset mapping for $mdr_parent");
$LOGGER->debug ("associated dataset is $dataset");

## TODO: kerberos principal check goes here.
# $config->sources->validate_principal ($mdr_parent, $register->env
#   ('KRB5CCNAME'));
$LOGGER->debug ('not yet validating kerberos principals');

## Finally, we can create our Remedy connection
$LOGGER->debug ("connecting to CMDB");
my $cmdb = eval { Remedy::CMDB->connect ('config' => $config, 
    'debug' => $DEBUG) } || exit_error ("couldn't create CMDB object: $@");
exit_error ($@) if $@;

## Actually register the query.
$LOGGER->debug ("registering the query");
my $response = $query->register_all ($cmdb, 'dataset' => $dataset, 
    'mdr' => $mdr_parent);

## Let the response print its output and exit.
$response->exit_response;

## We shouldn't have gotten here.
exit 1;

###############################################################################
### Functions #################################################################
###############################################################################

sub exit_error { Remedy::CMDB::Response->exit_error (@_) }

##############################################################################
### Final Documentation ######################################################
##############################################################################

=head1 TODO

Right now, more than one connection at a time doesn't work that well.  This
doesn't seem to be much of a problem, but it'd be nice if we could make things
work properly.

Should daemon mode be the default?

=head1 REQUIREMENTS

B<Remedy::CMDB::Server>

=head1 SEE ALSO

B<Remedy::CMDB::Config>

cmdb-register(1), cmdb-submit(1)

=head1 HOMEPAGE

TBD.

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
