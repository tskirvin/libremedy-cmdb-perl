#!/usr/bin/perl
# Copyright and license are in the documentation below.

=head1 NAME

cmdb-query -- stub for querying the Remedy CMDB

=head1 SYNOPSIS

B<remctl cmdb cmdb query> cmdb query < I<XML>

=head1 DESCRIPTION

B<cmdb-query> takes an XML-formatted query, parses the request to confirm
that the XML is valid, and passes it off to the local remedy query service
(along with a set of environment variables); it then returns an XML-formatted
response.  It is meant for use with B<remctl>, so that clients can issue
arbitrary queries.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

## Modify and uncomment this to use user modules instead of system-wide
## ones.  You'll need this unless you're installing as root.
# use lib '/FULL/PATH/TO/PERL/MODULES';

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Remedy::CMDB::Query::Response;
use XML::Twig;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

###############################################################################
### main() ####################################################################
###############################################################################

my $parser = Getopt::Long::Parser->new;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) });
exit_error ('bad command-line options') unless $result;

# just make sure the XML is good
my $twig = XML::Twig->new;
$twig->safe_parse (join ('', <STDIN>)) || exit_error ('bad XML on input');

exit_error ('query service not yet implemented');

##############################################################################
### Subroutines ##############################################################
##############################################################################
# Some will come, I suspect.

sub exit_error { 
    my ($text) = @_;
    Remedy::CMDB::Query::Response->exit_error (@_) 
}

###############################################################################
### Final Documentation #######################################################
###############################################################################

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Print debugging information.  Can be offered multiple times to increase
debugging accordingly.

=item B<-h>, B<--help>

Prints out the synopsis information and exits.

=item B<--man>

Prints this manual page and exit.

=back

=head1 NOTES

All of the above 'description' stuff is dependent on the system actually being
written, which we haven't done yet.  The stub seemed like a good idea, though.

=head1 REQUIREMENTS

B<Remedy::CMDB>, B<XML::Twig>

=head1 SEE ALSO

cmdb-register(1)

=head1 HOMEPAGE

TBD.

=head1 TODO

Actually write a query service.

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
