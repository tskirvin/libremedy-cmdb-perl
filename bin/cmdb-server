#!/usr/bin/perl
# Copyright and license are in the documentation below.

=head1 NAME

=head1 SYNOPSIS

=head1 DESCRIPTION

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

## Modify and uncomment this to use user modules instead of system-wide
## ones.  You'll need this unless you're installing as root.
# use lib '/FULL/PATH/TO/PERL/MODULES';
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-perl/lib";
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-cmdb-perl/lib";
# use lib '/PATH/TO/USER/CODE';

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 5;

## How many children should we allow running at a time?  This also works
## out to the maximum number of processes.
our $KIDS_MAX = 1;

## How long should it take before a connection times out?  This should be
## set to slightly below the lower-bound of the timeouts of any of the
## servers you connect to; the number is in seconds.
our $TIMEOUT = 10;

our $ALARM = 15;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Remedy::CMDB::Config;
use Remedy::CMDB::Server;

use POSIX qw(:sys_wait_h :signal_h :errno_h);

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

###############################################################################
### main() ####################################################################
###############################################################################

our $LOGGER = Remedy::CMDB::Log->get_logger;

my $parser = Getopt::Long::Parser->new;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) }) || _error_usage ();

$SIG{CHLD} = \&reaper; 		   # Set what to do when the children die.

our $server = Remedy::CMDB::Server->connect (
    'debug'     => $DEBUG
) || $LOGGER->logdie ("Couldn't initialize the server: $@");

my $logger = $server->logger_or_die;

$logger->debug ("server is listening");

our $count = 0;
our $CHILDREN = 0;
# Accept and process the connections
while (my $client = $server->socket->accept) {
    next unless defined fileno ($client);		# Socket not open -> stop
    $count++;
    if ($CHILDREN >= $KIDS_MAX) {
        print $client "too many clients connected\n";
        close $client;
        next;
    } # Only allow $KIDS_MAX servers

    $logger->info ("accepted connection ($client)");

    # Fork off more clients; if we're above $KIDS_MAX, though, wait for a
    # while and try again.  (This ought to have a real timeout, I guess)
    unless (my $pid = _fork ($client)) {
        next unless defined $pid;
        $CHILDREN++;
        $logger->info  ("connection $count established");
        $logger->debug ("forked off client $pid: $CHILDREN\n");
        next;
    }

    select ($client);

    $SIG{ALRM} = sub { exit_error ("Submission time of $ALARM seconds exceeded") }; 
    alarm $ALARM;

    my @input;
    while (my $line = <$client>) { 
        warn "L: $line\n";
        last if ($line =~ /^<\/cmdb-client>$/);
        push @input, $line;
    }
    warn "I: @input\n";
    my @return = $server->process (@input);
    foreach (@return) { print $client $_ }

    exit 0;

    # Central loop - every time there's input, do something with it.
    # my $time = time;

#    while (<$client>) {
#        if (time - $TIMEOUT > $time) {
#            $logger->debug ("connection timed out");
#            last;
#        } else {
#            $time = time
#        }
#        chomp;
#        print $_;
#        next unless (defined ($_) && $_ =~ /\S/);
#        last unless defined fileno ($client);	# Socket not open -> stop
#        $server->process ($client, $_) || last;
#    }

    # Close up and exit.
    close $client;
    select (\*STDOUT);
    exit 0;
}

$server->server_close;
exit 0;

###############################################################################
### Functions #################################################################
###############################################################################

### _fork ( FILEHANDLE )
# Just the fork code.
sub _fork {
    my ($fh) = @_;
    return unless $fh && defined fileno ($fh);
    if (my $pid = fork) {    # Success, and we're the parent:
        close $fh;           #   close the fh, return 0, wait for next call
        return 0;
    } elsif (defined $pid) { # Success, and we're a child:
        return 1;            #   return something, so we can keep going
    } elsif ($! == EAGAIN) { # Retry - this is the "do again" thing
        sleep 3;
        return _fork ($fh);
    } else {
        die "Cannot fork: $!\n";
        return;
    }
}

### reaper (PID)
# Takes care of cleaning up the children processes.
sub reaper {
    my $kid = waitpid (-1, WNOHANG);
    if ($kid == -1) { 		    # no child waiting; ignore
    } elsif (WIFEXITED ($?)) {	# process exited
        $CHILDREN--;
        $LOGGER->debug ("Client reaped, $CHILDREN remain");
        reaper ();			# Make sure there's no more left
    } else {
        return                  # False alarm; ignore
    }
}


##############################################################################
### Documentation ############################################################
##############################################################################

=head1 NAME

cmdb-server -

=head1 SYNOPSIS

B<cmdb-server> [--config F<CONFIG>]

=head1 DESCRIPTION

=head1 NOTES

=head1 REQUIREMENTS

=head1 SEE ALSO

=head1 TODO

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
