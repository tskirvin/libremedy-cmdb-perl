#!/usr/bin/perl -T

##############################################################################
### Configuration ############################################################
##############################################################################

use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/Stanford-Remedy/lib";
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-perl/lib";
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-cmdb-perl/lib";

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 5;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
# use warnings;

use Getopt::Long;
use Lingua::EN::Inflect qw/inflect/;
use Pod::Usage;
use Remedy::CMDB::Register;
use Remedy::CMDB::RegisterResponse;
use Remedy::CMDB;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

##############################################################################
### main () ##################################################################
##############################################################################

our $LOGGER   = Remedy::CMDB::Log->get_logger;

## we create the config item first so we can do logging and such
my $config = eval { Remedy::CMDB::Config->load () };
exit_error ("could not load CMDB configuration: $@") unless $config;

## this is the only place we're going to use non-XML exit error strings
my $parser = new Getopt::Long::Parser;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) }) || error_usage ();

$config->log->more_logging ($DEBUG) if $DEBUG;
# $LOGGER = $config->log->logger;

## read the XML from STDIN
my $register = eval { Remedy::CMDB::Register->read ('xml', 'type' => 'stream', 
    'source' => \*STDIN) };
exit_error ("could not read registration source: $@") unless $register;

$LOGGER->debug (sprintf ("parsed registration XML: %d items, %d relationships",
    scalar $register->items, scalar $register->relationships));

## Make sure the mdrId is set; we'll match it in a second
my $mdr_parent = $register->mdrId || exit_error ("no mdrId in source XML");
$LOGGER->debug ("mdr_parent is $mdr_parent");

## Now make sure the mdrId matches a valid dataset
my $dataset = $config->mdr_to_dataset ($mdr_parent) 
    || exit_error ("no dataset mapping for $mdr_parent");
$LOGGER->debug ("associated dataset is $dataset");

## TODO: look at the kerberos principal, ye mighty, and despair
$LOGGER->debug ("skipping kerberos principal check for now");

## Finally, we can create our Remedy connection
$LOGGER->debug ("connecting to CMDB");
my $cmdb = eval { Remedy::CMDB->connect ('config' => $config) }
    || exit_error ("couldn't create CMDB object: $@");
exit_error ($@) if $@;

## Start creating the response now
our $RESPONSE = Remedy::CMDB::RegisterResponse->new ();

my (@errors) = @_;

my ($item_count, $item_error);
foreach my $item ($register->items) { 
    $item_count++;
    my $error = $cmdb->register_item ($item, 'response' => $RESPONSE, 
        'dataset' => $dataset, 'mdr_parent' => $mdr_parent);
    if ($error) { 
        $RESPONSE->add_declined ($item, $error) if $error;
        $item_error++;
    }
}

# then relationships w/register_relationship
my ($relate_count, $relate_error);
foreach my $relate ($register->relationships) {
    $relate_count++;
    my $error = $cmdb->register_relationship ($relate, 'response' => $RESPONSE, 
        'dataset' => $dataset, 'mdr_parent' => $mdr_parent);
    if ($error) {
        $RESPONSE->add_declined ($relate, $error) if $error;
        $relate_error++;
    }
}

$LOGGER->info (sprintf ("%s out of %s", 
    inflect ("NUM($item_error) PL_N(error)"),
    inflect ("NUM($item_count) PL_N(item)")));
$LOGGER->info (sprintf ("%s out of %s", 
    inflect ("NUM($relate_error) PL_N(error)"),
    inflect ("NUM($relate_count) PL_N(relationship)")));

exit_response ($RESPONSE);

##############################################################################
### Subroutines ##############################################################
##############################################################################

sub exit_response {
    my ($response, %args) = @_;
    print scalar $response->xml;
    exit defined $args{'FATAL'} ? 1 : 0;
}

sub exit_error {
    my ($text, %args) = @_;
    $LOGGER->fatal ($text);
    my $response = Remedy::CMDB::RegisterResponse->new ();
    $response->add_error ('global', $text);
    exit_response ($response, 'FATAL' => 1, %args);
}

sub error_usage {
    my ($error) = @_;
    $LOGGER->error ($error);
    pod2usage (-exit_status => 2, -verbose => 1);
}

##############################################################################
### Documentation ############################################################
##############################################################################
