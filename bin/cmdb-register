#!/usr/bin/perl
# Copyright and license are in the documentation below.

=head1 NAME

=head1 SYNOPSIS

=head1 DESCRIPTION

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

## Modify and uncomment this to use user modules instead of system-wide
## ones.  You'll need this unless you're installing as root.
# use lib '/FULL/PATH/TO/PERL/MODULES';
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-perl/lib";
use lib "/afs/ir/users/t/s/tskirvin/private/work/remedy/libremedy-cmdb-perl/lib";
# use lib '/PATH/TO/USER/CODE';

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

# our $ALARM = 60;
our $ALARM = 5;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Remedy::CMDB::Client;
use Remedy::CMDB::RegisterResponse qw/exit_error/;
use XML::Twig;
use XML::Writer::Raw;

use Remedy::CMDB::Struct;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

###############################################################################
### main() ####################################################################
###############################################################################

my $parser = Getopt::Long::Parser->new;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) });
exit_error ('bad command-line options') unless $result;

# just make sure the XML is good
my $twig = XML::Twig->new;
$twig->safe_parse (join ('', <STDIN>)) || exit_error ('bad XML on input');

my $client = eval { Remedy::CMDB::Client->connect ('DEBUG' => $DEBUG) }
    or exit_error ("couldn't connect to CMDB: $@\n");

my $socket = $client->socket;

my $string;
my $writer = XML::Writer::Raw->new ('OUTPUT' => \$string, 'DATA_INDENT' => 4,
    'NEWLINES' => 0, 'DATA_MODE' => 1, 'UNSAFE' => 1);
$writer->startTag ('cmdb-client');

$writer->startTag ('environment');
foreach my $key (sort keys %ENV) {
    $writer->dataElement ($key, $ENV{$key});
}
$writer->endTag;

$writer->startTag ('request');
$writer->write_raw_with_format ($twig->sprint ('pretty_print' => 'indented_a'));
$writer->endTag;

$writer->endTag;
$writer->end;

print $socket $string;

$SIG{ALRM} = sub { exit_error ("Submission time of $ALARM seconds exceeded") };
alarm $ALARM;

while (<$socket>) { 
    print;
    last if /^<\/registerResponse>$/;
}

$socket->close;

exit 0;

##############################################################################
### Subroutines ##############################################################
##############################################################################

###############################################################################
### Documentation #############################################################
###############################################################################

=head1 NAME

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 NOTES

=head1 REQUIREMENTS

=head1 SEE ALSO

=head1 TODO

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
