#!/usr/bin/perl
# Copyright and license are in the documentation below.

=head1 NAME

cmdb-register - takes XML on STDIN, and sends it to the CDMB daemon

=head1 SYNOPSIS

B<remctl cmdb cmdb register> cmdb register < I<XML>

=head1 DESCRIPTION

B<cmdb-register> takes an XML-formatted registration, parses the request to
confirm that the XML is valid, and passes it off to the local remedy-cmdb
service (along with a set of environment variables); it then returns an
XML-formatted response.  It is meant for use with B<remctl>, so that clients
can issue arbitrary registrations.

=cut

##############################################################################
### Configuration ############################################################
##############################################################################

## Modify and uncomment this to use user modules instead of system-wide
## ones.  You'll need this unless you're installing as root.
# use lib '/FULL/PATH/TO/PERL/MODULES';

## Print debugging information?  Set with '--debug', can be set many times
our $DEBUG = 0;

## How many seconds should we wait for the submission to go through?
our $ALARM = 60;

##############################################################################
### Declarations #############################################################
##############################################################################

use strict;
use warnings;

use Getopt::Long;
use Remedy::CMDB::Client;
use Remedy::CMDB::Register::Response;
use XML::Twig;
use XML::Writer::Raw;

$0 =~ s%.*/%%g;     # Lose the annoying path information
$|++;               # Flush output

###############################################################################
### main() ####################################################################
###############################################################################

my $parser = Getopt::Long::Parser->new;
my $result = $parser->getoptions (
    'd|debug+'      => \$DEBUG,
    'man'           => sub { pod2usage (-verbose => 2, -noperldoc => 1) },
    'h|help'        => sub { pod2usage (-verbose => 1) });
exit_error ('bad command-line options') unless $result;

# just make sure the XML is good
my $twig = XML::Twig->new ('no_prolog' => 1);
$twig->safe_parse (join ('', <STDIN>)) || exit_error ('bad input XML');

$SIG{ALRM} = sub { exit_error ("$0: timeout ($ALARM seconds)") };
alarm $ALARM;

my $string = create_xml_string ($twig);

my $client = eval { Remedy::CMDB::Client->connect ('DEBUG' => $DEBUG) }
    or exit_error ("couldn't connect to CMDB: $@\n");

my $socket = $client->socket;
print $socket $string;
$socket->shutdown (1);  # no more writing
while (<$socket>) { print }
$socket->close;

exit 0;

##############################################################################
### Subroutines ##############################################################
##############################################################################

### create_xml_string
# Given an XML::Twig, creates and returns a string containing a full
# 'cmdb-client' XML fragment.  Uses XML::Writer::Raw.
## TODO: we might want to move this to a sub-module somewhere.
sub create_xml_string {
    my ($twig) = @_;
    my $string;
    my $writer = XML::Writer::Raw->new ('OUTPUT' => \$string, 
        'DATA_INDENT' => 4, 'NEWLINES' => 0, 'DATA_MODE' => 1, 'UNSAFE' => 1);
    $writer->xmlDecl ();
    $writer->startTag ('cmdb-client');
    { 
        $writer->startTag ('environment');
        foreach my $key (sort keys %ENV) {
            $writer->dataElement ($key, $ENV{$key});
        }
        $writer->endTag;

        my %args = ('pretty_print' => 'indented');  # was indented_a
        $writer->startTag ('request');
        $writer->setDataIndent ($writer->getDataIndent + 4);  ## HACK
        $writer->write_raw_with_format ($twig->sprint (%args));
        $writer->setDataIndent ($writer->getDataIndent - 4);  ## HACK
        $writer->endTag ('request');

    } 
    $writer->endTag;
    $writer->end;

    return $string;
}

## exit with an error
sub exit_error { 
    my ($text) = @_;
    Remedy::CMDB::Register::Response->exit_error (@_) 
}

###############################################################################
### Documentation #############################################################
###############################################################################

=head1 NOTES

=head1 REQUIREMENTS

B<Remedy::CMDB>

=head1 SEE ALSO

cmdb-query(1)

=head1 TODO

=head1 AUTHOR

Tim Skirvin <tskirvin@stanford.edu>

=head1 LICENSE

Copyright 2009 Board of Trustees, Leland Stanford Jr. University

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut
